--- a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
+++ b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
@@ -162,7 +162,6 @@ void SpellcheckHunspellDictionary::Retry
     return;
   }
   browser_context_ = browser_context;
-  DownloadDictionary(GetDictionaryURL());
 }
 
 bool SpellcheckHunspellDictionary::IsReady() const {
@@ -400,9 +399,6 @@ void SpellcheckHunspellDictionary::Initi
     }
 
     if (browser_context_) {
-      // Download from the UI thread to check that |browser_context_| is
-      // still valid.
-      DownloadDictionary(GetDictionaryURL());
       return;
     }
   }
--- a/components/translate/core/browser/translate_language_list.cc
+++ b/components/translate/core/browser/translate_language_list.cc
@@ -207,6 +207,8 @@ GURL TranslateLanguageList::TranslateLan
 }
 
 void TranslateLanguageList::RequestLanguageList() {
+  return;
+
   // If resource requests are not allowed, we'll get a callback when they are.
   if (!resource_requests_allowed_) {
     request_pending_ = true;
--- a/components/translate/core/browser/translate_ranker_impl.cc
+++ b/components/translate/core/browser/translate_ranker_impl.cc
@@ -157,14 +157,10 @@ TranslateRankerImpl::TranslateRankerImpl
                                          ukm::UkmRecorder* ukm_recorder)
     : ukm_recorder_(ukm_recorder),
       is_logging_enabled_(false),
-      is_query_enabled_(base::FeatureList::IsEnabled(kTranslateRankerQuery)),
-      is_enforcement_enabled_(
-          base::FeatureList::IsEnabled(kTranslateRankerEnforcement)),
-      is_auto_blacklist_override_enabled_(base::FeatureList::IsEnabled(
-          translate::kTranslateRankerAutoBlacklistOverride)),
-      is_previous_language_matches_override_enabled_(
-          base::FeatureList::IsEnabled(
-              translate::kTranslateRankerPreviousLanguageMatchesOverride)) {
+      is_query_enabled_(false),
+      is_enforcement_enabled_(false),
+      is_auto_blacklist_override_enabled_(false),
+      is_previous_language_matches_override_enabled_(false) {
   if (is_query_enabled_ || is_enforcement_enabled_) {
     model_loader_ = std::make_unique<assist_ranker::RankerModelLoaderImpl>(
         base::Bind(&ValidateModel),
@@ -237,6 +233,8 @@ bool TranslateRankerImpl::ShouldOfferTra
   // (or become False).
   const bool kDefaultResponse = true;
 
+  return kDefaultResponse;
+
   translate_event->set_ranker_request_timestamp_sec(
       (base::TimeTicks::Now() - base::TimeTicks()).InSeconds());
   translate_event->set_ranker_version(GetModelVersion());
